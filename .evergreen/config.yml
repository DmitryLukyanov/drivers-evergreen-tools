########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 6 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
        script: |
           ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "mongoc"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
      params:
        directory: "mongoc"
    # Make an evergreen exapanstion file with the current unique version
    - command: shell.exec
      params:
        script: |
           if [ "${is_patch}" = "true" ]; then
              VERSION=$(git describe)-patch-${version_id}
           else
              VERSION=latest
           fi
           echo "CURRENT_VERSION: $VERSION" > expansion.yml
    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        continue_on_err: true
        # Must be http as RHEL55 has https issues
        script: |
          set -o xtrace
          pip install --upgrade git+git://github.com/mongodb/mongo-orchestration@master

  "fetch resources":
    - command: shell.exec
      params:
        script: |
           rm -rf /opt/drivers-tools || true
           git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git /opt/drivers-tools

  "upload release":
    - command: shell.exec
      params:
        script: |
           [ -f mongoc/mongo*gz ] && mv mongoc/mongo*gz mongoc.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc.tar.gz
        remote_file: mongo-c-driver/mongo-c-driver-${CURRENT_VERSION}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  "upload build":
    # Compress and upload the entire build directory
    - command: archive.targz_pack
      params:
        # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        target: "${build_id}.tar.gz"
        source_dir: "mongoc"
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${build_id}.tar.gz
        # Example: /mciuploads/mongo-c-driver/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  "fetch build":
    - command: shell.exec
      params:
        continue_on_err: true
        script: "set -o xtrace && rm -rf mongoc"
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongo-c-driver/${build_variant}/${revision}/${BUILD_NAME}/${build_id}.tar.gz
        bucket: mciuploads
        local_file: build.tar.gz
    - command: shell.exec
      params:
        continue_on_err: true
        # EVG-1105: Use s3.get extract_to: mongoc/
        script: "set -o xtrace && mkdir mongoc && tar xf build.tar.gz -C mongoc/"

  "upload docs" :
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp doc/html s3://mciuploads/${project}/docs/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/doc/html/index.html
        remote_file: ${project}/docs/${CURRENT_VERSION}/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Rendered docs"

  "upload coverage" :
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp coverage s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/coverage/index.html
        remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report"

  "upload scan artifacts" :
    - command: shell.exec
      type: test
      params:
        working_dir: "mongoc"
        script: |
          if find scan -name \*.html | grep -q html; then
            (cd scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
          else
            echo "No issues found" > scan.html
          fi
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp scan s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/scan.html
        remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Scan Build Report"

  "upload mo artifacts":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          DIR=MO
          [ -d "/cygdrive/c/data/mo" ] && DIR="/cygdrive/c/data/mo"
          [ -d $DIR ] && find $DIR -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc/mongodb-logs.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc/MO/server.log
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: "mongoc"
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"

  "upload test results":
    - command: attach.results
      params:
        file_location: "mongoc/test-results.json"

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          set -o xtrace
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} sh .evergreen/run-orchestration.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          AUTH=${AUTH} SSL=${SSL} URI=${URI} sh .evergreen/run-tests.sh

  "cleanup":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          cd MO
          mongo-orchestration stop

  "windows fix":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          for i in $(find .evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

  "make files executable":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          for i in $(find .evergreen -name \*.sh); do
            chmod +x $i
          done

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
              sudo apt-get install -y awscli || true
              sudo /opt/csw/bin/pkgutil -y -i sasl_dev || true

pre:
  - func: "fetch source"
  - func: "fetch resources"
  - func: "windows fix"
  - func: "make files executable"
  - func: "install dependencies"

post:
  - func: "upload working dir"
  - func: "upload mo artifacts"
  - func: "upload test results"
  - func: "cleanup"

tasks:


    # Wildcard task. Do you need to find out what tools are available and where?
    # Throw it here, and execute this task on all buildvariants
    - name: getdata
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
               set -o xtrace
               . ./.evergreen/download-mongodb.sh || true
               get_distro || true
               echo $DISTRO
               echo $MARCH
               echo $OS
               uname -a || true
               ls /etc/*release* || true
               cc --version || true
               gcc --version || true
               clang --version || true
               gcov --version || true
               lcov --version || true
               llvm-cov --version || true
               echo $PATH
               ls -la /usr/local/Cellar/llvm/*/bin/ || true
               ls -la /usr/local/Cellar/ || true
               scan-build --version || true
               genhtml --version || true
               valgrind --version || true

# Compile Matrix {{{
    - name: make-release-archive
      tags: ["releng"]
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              echo "Hello World"
        - func: "upload docs"
        - func: "upload release"
        - func: "upload build"

    - name: release-compile
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              RELEASE=yes CC='${CC}' MARCH='${MARCH}' sh .evergreen/compile.sh
        - func: "upload build"

    - name: release-compile-cmake
      tags: ["releng"]
      depends_on:
        - name: "make-release-archive"
          variant: "releng-release-archive-creator"
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              RELEASE=yes BUILDTOOL="cmake" CC='${CC}' MARCH='${MARCH}' sh .evergreen/compile.sh
        - func: "upload build"

    - name: debug-compile
      tags: ["releng"]
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              CC='${CC}' MARCH='${MARCH}' sh .evergreen/compile.sh
        - func: "upload build"
# }}}

    - name: "test-latest-replicaset"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "replica_set"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-latest-sharded"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "sharded_cluster"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-latest-standalone"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "latest"
            TOPOLOGY: "server"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-3.2-replicaset"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "replica_set"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-2.6-replicaset"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "replica_set"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-3.2-sharded"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "sharded_cluster"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-2.6-sharded"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "sharded_cluster"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-3.2-standalone"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "server"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""


    - name: "test-2.6-standalone"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "3.2"
            TOPOLOGY: "server"
            AUTH: ${AUTH}
            SSL: ${SSL}
        - func: "run tests"
          vars:
            AUTH: ${AUTH}
            SSL: ${SSL}
            URI: ""



axes:
  - id: versions
    display_name: MongoDB Version
    values:
      - id: "latest"
        display_name: "latest"
        variables:
           VERSION: "latest"
      - id: "3.2"
        display_name: "3.2"
        variables:
           VERSION: "3.2"
      - id: "3.0"
        display_name: "3.0"
        variables:
           VERSION: "3.0"
      - id: "2.6"
        display_name: "2.6"
        variables:
           VERSION: "2.6"
  - id: os
    display_name: OS
    values:
      - id: ubuntu1204-build
        display_name: "Ubuntu 12.04"
        run_on: ubuntu1204-build

      - id: ubuntu-14.04
        display_name: "Ubuntu 14.04"
        run_on: ubuntu1404-build

      - id: ubuntu-16.04
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-build

      - id: archlinux-build
        display_name: "Archlinux"
        run_on: archlinux-build

      - id: debian81-build
        display_name: "Debian 8.1"
        run_on: debian81-build

      - id: osx-1010
        display_name: "macOS 10.10"
        run_on: osx-1010

      - id: rhel70
        display_name: "RHEL 7.0"
        run_on: rhel70

      - id: rhel71-power8-build
        display_name: "RHEL 7.1 (POWER8)"
        run_on: rhel71-power8-build

      - id: rhel72-zseries-build
        display_name: "RHEL 7.2 (zSeries)"
        run_on: rhel72-zseries-build

      - id: solaris
        display_name: "Solaris"
        run_on: solaris

      - id: suse12-zseries-build
        display_name: "SUSE 12 (zSeries)"
        run_on: suse12-zseries-build

      - id: ubuntu1604-arm64-large
        display_name: "Ubuntu 16.04 (ARM64)"
        run_on: ubuntu1604-arm64-large

      - id: ubuntu1604-power8-build
        display_name: "Ubuntu 16.04 (POWER8)"
        run_on: ubuntu1604-power8-build

      - id: ubuntu1604-zseries-large
        display_name: "Ubuntu 16.04 (zSeries)"
        run_on: ubuntu1604-zseries-large

      - id: windows-64-vs2010-compile
        display_name: "Windows (VS2010)"
        run_on: windows-64-vs2010-compile

      - id: windows-64-vs2013-compile
        display_name: "Windows (VS2013)"
        run_on: windows-64-vs2013-compile

      - id: windows-64-vs2015-compile
        display_name: "Windows (VS2015)"
        run_on: windows-64-vs2015-compile


  - id: topology
    display_name: Topology
    values:
      - id: standalone
        display_name: Standalone
        variables:
           TOPOLOGY: "server"
      - id: replicaset
        display_name: Replica Set
        variables:
           TOPOLOGY: "replica_set"
      - id: sharded-cluster
        display_name: Sharded Cluster
        variables:
           TOPOLOGY: "sharded_cluster"
  - id: auth
    display_name: Authentication
    values:
      - id: auth
        display_name: Auth
        variables:
           AUTH: "auth"
      - id: noauth
        display_name: NoAuth
        variables:
           AUTH: "noauth"
  - id: ssl
    display_name: SSL
    values:
      - id: ssl
        display_name: SSL
        variables:
           SSL: "ssl"
      - id: nossl
        display_name: NoSSL
        variables:
           SSL: "nossl"


buildvariants:

- name: releng-release-archive-creator
  display_name: "** Release Archive Creator"
  run_on:
    - ubuntu1404-build
  tasks:
    - ".releng" # Run all tasks with the "releng" tag



- matrix_name: "tests"
#  matrix_spec: {os: "*", topology: "*", auth: "*", ssl: "*", versions: "*" }
  matrix_spec: {os: "*", auth: "*", ssl: "*" }
  display_name: "${os} ${auth} ${ssl}"
  tasks:
     - name: "test-latest-replicaset"
     - name: "test-latest-sharded"
     - name: "test-latest-standalone"
     - name: "test-3.2-replicaset"
     - name: "test-3.2-sharded"
     - name: "test-3.2-standalone"
     - name: "test-2.6-replicaset"
     - name: "test-2.6-sharded"
     - name: "test-2.6-standalone"



      # Platform notes
      # i386 builds of OpenSSL or Cyrus SASL are not available
      # Ubuntu14.04 only supports 2.6+ with SSL
      # Ubuntu16.04 ppc64le is only supported by MongoDB 3.4+
      # Ubuntu16.04 aarch64 is only supported by MongoDB 3.4+
      # Ubuntu16.04 s390x is only supported by MongoDB 3.4+
      # Ubuntu16.04 (x86) only supports MongoDB 3.4+
      # Debian 8.1 only supports MongoDB 3.4+
      # SUSE12 s390x is only supported by MongoDB 3.4+
      # No enterprise build for Archlinux, SSL not available
      # RHEL 7 only supports 2.6+
      # RHEL 7.1 ppc64le is only supported by MongoDB 3.2+
      # RHEL 7.2 s390x is only supported by MongoDB 3.4+
      # Solaris MongoDB SSL builds are not available
      # Darwin MongoDB SSL builds are not available for 2.4 and 2.6
      # Windows does not support MongoDB 2.4

