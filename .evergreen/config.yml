########################################
# Evergreen Template for MongoDB Drivers
########################################

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 6 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
        script: |
           ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "mongoc"
    # Applies the subitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
      params:
        directory: "mongoc"
    # Make an evergreen exapanstion file with the current unique version
    - command: shell.exec
      params:
        script: |
           if [ "${is_patch}" = "true" ]; then
              VERSION=$(git describe)-patch-${version_id}
           else
              VERSION=latest
           fi
           echo "CURRENT_VERSION: $VERSION" > expansion.yml
    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: expansion.yml
    - command: shell.exec
      params:
        continue_on_err: true
        # Must be http as RHEL55 has https issues
        script: |
          set -o xtrace
          pip install --upgrade git+git://github.com/mongodb/mongo-orchestration@master

  "fetch resources":
    - command: shell.exec
      params:
        script: |
           rm -rf /opt/drivers-tools || true
           git clone git://github.com/mongodb-labs/drivers-evergreen-tools.git /opt/drivers-tools

  "upload release":
    - command: shell.exec
      params:
        script: |
           [ -f mongoc/mongo*gz ] && mv mongoc/mongo*gz mongoc.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc.tar.gz
        remote_file: mongo-c-driver/mongo-c-driver-${CURRENT_VERSION}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  # Upload build artifacts that other tasks may depend on
  # Note this URL needs to be totally unique, while predictable for the next task
  # so it can automatically download the artifacts
  "upload build":
    # Compress and upload the entire build directory
    - command: archive.targz_pack
      params:
        # Example: mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        target: "${build_id}.tar.gz"
        source_dir: "mongoc"
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ${build_id}.tar.gz
        # Example: /mciuploads/mongo-c-driver/gcc49/9dfb7d741efbca16faa7859b9349d7a942273e43/debug-compile-nosasl-nossl/mongo_c_driver_releng_9dfb7d741efbca16faa7859b9349d7a942273e43_16_11_08_19_29_52.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${task_name}/${build_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

  "fetch build":
    - command: shell.exec
      params:
        continue_on_err: true
        script: "set -o xtrace && rm -rf mongoc"
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongo-c-driver/${build_variant}/${revision}/${BUILD_NAME}/${build_id}.tar.gz
        bucket: mciuploads
        local_file: build.tar.gz
    - command: shell.exec
      params:
        continue_on_err: true
        # EVG-1105: Use s3.get extract_to: mongoc/
        script: "set -o xtrace && mkdir mongoc && tar xf build.tar.gz -C mongoc/"

  "upload docs" :
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp doc/html s3://mciuploads/${project}/docs/${CURRENT_VERSION} --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/doc/html/index.html
        remote_file: ${project}/docs/${CURRENT_VERSION}/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Rendered docs"

  "upload coverage" :
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp coverage s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/coverage/index.html
        remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/coverage/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Coverage Report"

  "upload scan artifacts" :
    - command: shell.exec
      type: test
      params:
        working_dir: "mongoc"
        script: |
          if find scan -name \*.html | grep -q html; then
            (cd scan && find . -name index.html -exec echo "<li><a href='{}'>{}</a></li>" \;) >> scan.html
          else
            echo "No issues found" > scan.html
          fi
    - command: shell.exec
      params:
        silent: true
        working_dir: "mongoc"
        script: |
           export AWS_ACCESS_KEY_ID=${aws_key}
           export AWS_SECRET_ACCESS_KEY=${aws_secret}
           aws s3 cp scan s3://mciuploads/${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/ --recursive --acl public-read --region us-east-1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file:  mongoc/scan.html
        remote_file: ${project}/${build_variant}/${revision}/${version_id}/${build_id}/scan/index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: "Scan Build Report"

  "upload mo artifacts":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          DIR=MO
          [ -d "/cygdrive/c/data/mo" ] && DIR="/cygdrive/c/data/mo"
          [ -d $DIR ] && find $DIR -name \*.log | xargs tar czf mongodb-logs.tar.gz
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc/mongodb-logs.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-mongodb-logs.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "mongodb-logs.tar.gz"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongoc/MO/server.log
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/logs/${task_id}-${execution}-orchestration.log
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|text/plain}
        display_name: "orchestration.log"

  "upload working dir":
    - command: archive.targz_pack
      params:
        target: "working-dir.tar.gz"
        source_dir: "mongoc"
        include:
          - "./**"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: working-dir.tar.gz
        remote_file: mongo-c-driver/${build_variant}/${revision}/${version_id}/${build_id}/artifacts/${task_id}-${execution}-working-dir.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: "working-dir.tar.gz"

  "upload test results":
    - command: attach.results
      params:
        file_location: "mongoc/test-results.json"

  "bootstrap mongo-orchestration":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          set -o xtrace
          MONGODB_VERSION=${VERSION} TOPOLOGY=${TOPOLOGY} AUTH=${AUTH} SSL=${SSL} sh .evergreen/run-orchestration.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          AUTH=${AUTH} SSL=${SSL} URI=${URI} sh .evergreen/run-tests.sh

  "cleanup":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          set -o errexit
          cd MO
          mongo-orchestration stop

  "windows fix":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          for i in $(find .evergreen -name \*.sh); do
            cat $i | tr -d '\r' > $i.new
            mv $i.new $i
          done

  "make files executable":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
          for i in $(find .evergreen -name \*.sh); do
            chmod +x $i
          done

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "mongoc"
        script: |
              sudo apt-get install -y awscli || true
              sudo /opt/csw/bin/pkgutil -y -i sasl_dev || true

pre:
  - func: "fetch source"
  - func: "fetch resources"
  - func: "windows fix"
  - func: "make files executable"
  - func: "install dependencies"

post:
  - func: "upload working dir"
  - func: "upload mo artifacts"
  - func: "upload test results"
  - func: "cleanup"

tasks:


    # Wildcard task. Do you need to find out what tools are available and where?
    # Throw it here, and execute this task on all buildvariants
    - name: getdata
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
               set -o xtrace
               . ./.evergreen/download-mongodb.sh || true
               get_distro || true
               echo $DISTRO
               echo $MARCH
               echo $OS
               uname -a || true
               ls /etc/*release* || true
               cc --version || true
               gcc --version || true
               clang --version || true
               gcov --version || true
               lcov --version || true
               llvm-cov --version || true
               echo $PATH
               ls -la /usr/local/Cellar/llvm/*/bin/ || true
               ls -la /usr/local/Cellar/ || true
               scan-build --version || true
               genhtml --version || true
               valgrind --version || true

# Compile Matrix {{{
    - name: make-release-archive
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              export MONGOC_TEST_FUTURE_TIMEOUT_MS=30000
              export MONGOC_TEST_SKIP_LIVE=on
              export MONGOC_TEST_SKIP_SLOW=on
              ./autogen.sh --enable-html-docs --enable-man-pages && make distcheck
        - func: "upload docs"
        - func: "upload release"
        - func: "upload build"

    - name: release-compile
      tags: ["release-compile"]
      depends_on:
        - name: "make-release-archive"
          variant: releng
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              RELEASE=yes CC='${CC}' MARCH='${MARCH}' sh .evergreen/compile.sh
        - func: "upload build"

    - name: releng-cmake-compile
      tags: ["release-eng", "releng-cmake-compile"]
      depends_on:
        - name: "make-release-archive"
          variant: releng
      commands:
        - command: shell.exec
          type: test
          params:
            working_dir: "mongoc"
            script: |
              set -o errexit
              set -o xtrace
              BUILDTOOL="cmake" sh .evergreen/compile.sh
        - func: "upload build"
# }}}

# Test Matrix {{{
    - name: test-2.4-server-noauth-nosasl-nossl
      tags: ["nossl", "nosasl", "noauth", "server", "2.4"]
      depends_on:
        - name: "debug-compile-nosasl-nossl"
      commands:
        - func: "fetch build"
          vars:
            BUILD_NAME: "debug-compile-nosasl-nossl"
        - func: "bootstrap mongo-orchestration"
          vars:
            VERSION: "2.4"
            TOPOLOGY: "server"
            AUTH: "noauth"
            SSL: "nossl"
        - func: "run tests"
          vars:
            AUTH: "noauth"
            SSL: "nossl"
            URI: ""
# }}}



buildvariants:

- name: releng
  display_name: "**Release Archive Creator"
  run_on:
    - ubuntu1404-build
  tasks:
    - "make-release-archive"
    - ".release-eng"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .stdflags !.c89"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - "debug-compile-valgrind"


- name: clang34ubuntu
  display_name: "clang 3.4 (Ubuntu 14.04)"
  expansions:
    CC: "clang"
  run_on:
    - ubuntu1404-build
  tasks:
    - "debug-compile-scan-build"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .openssl !.nosasl !.auth"
    - ".2.6 .openssl !.nosasl !.auth"
      # Ubuntu 14.04 only supports 2.6+ with SSL

- name: clang35
  display_name: "clang 3.5 (Debian 8.1)"
  expansions:
    CC: "clang"
  run_on:
  - debian81-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .stdflags !.c89"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Debian 8.1 only supports MongoDB 3.4+

- name: clang37
  display_name: "clang 3.7 (Archlinux)"
  expansions:
    CC: "clang"
  run_on:
    - archlinux-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .stdflags !.c89"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .nossl !.nosasl"
    - ".3.2 .nossl !.nosasl" # No enterprise build for Archlinux, SSL not available
    - ".3.0 .nossl .nosasl !.auth"
    - ".2.6 .nossl .nosasl !.auth"
    - ".2.4 .nossl .nosasl !.auth"

- name: clang38-i386
  display_name: "clang 3.8 (i386) (Ubuntu 16.04)"
  expansions:
    CC: "clang"
    MARCH: "i386"
  run_on:
    - ubuntu1604-build
  tasks:
    - "debug-compile-scan-build"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .stdflags !.c89"
    - ".debug-compile .nossl .nosasl"
    - ".latest .nossl .nosasl"
      # We don't have i386 builds of OpenSSL or Cyrus SASL installed
      # Ubuntu16.04 only supports MongoDB 3.4+

- name: clang38
  display_name: "clang 3.8 (Ubuntu 16.04)"
  expansions:
    CC: "clang"
  run_on:
    - ubuntu1604-build
  tasks:
    - "debug-compile-scan-build"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .stdflags !.c89"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Ubuntu16.04 only supports MongoDB 3.4+

## GCC
- name: gcc46
  display_name: "GCC 4.6 (Ubuntu 12.04)"
  expansions:
    CC: "gcc"
  run_on:
    - ubuntu1204-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .openssl !.nosasl !.auth"
    - ".2.6 .openssl !.nosasl !.auth"
    - ".2.4 .nossl !.nosasl !.auth"

- name: gcc48ubuntu
  display_name: "GCC 4.8 (Ubuntu 14.04)"
  expansions:
    CC: "gcc"
  run_on:
    - ubuntu1404-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .openssl !.nosasl !.auth"
    - ".2.6 .openssl !.nosasl !.auth"
      # Ubuntu 14.04 only supports 2.6+ with SSL

- name: gcc48rhel
  display_name: "GCC 4.8 (RHEL 7.0)"
  expansions:
    CC: "gcc"
  run_on:
    - rhel70
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .openssl !.nosasl !.auth"
    - ".2.6 .openssl !.nosasl !.auth"
      # RHEL 7 only supports 2.6+


- name: gcc49
  display_name: "GCC 4.9 (Debian 8.1)"
  expansions:
    CC: "gcc"
  run_on:
  - debian81-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Debian 8.1 only supports MongoDB 3.4+

- name: gcc53-i386
  display_name: "GCC 5.3 (i386) (Ubuntu 16.04)"
  expansions:
    CC: "gcc"
    MARCH: "i386"
  run_on:
  - ubuntu1604-build
  tasks:
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .nossl .nosasl"
    - ".latest .nossl .nosasl"
      # We don't have i386 builds of OpenSSL or Cyrus SASL installed
      # Ubuntu16.04 only supports MongoDB 3.4+

- name: gcc53
  display_name: "GCC 5.3 (Ubuntu 16.04)"
  expansions:
    CC: "gcc"
  run_on:
  - ubuntu1604-build
  tasks:
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Ubuntu16.04 only supports MongoDB 3.4+

# Interesting platforms
- name: solaris
  display_name: "*Solaris (x86-64) (GCC 4.9.2)"
  expansions:
    CC: "gcc"
    MARCH: "x86_64"
  batchtime: 1440 # 1 day
  run_on:
    - solaris
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .nossl"
    - ".latest .nossl" # No MongoDB SSL builds available for any version
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .nossl !.nosasl"
    - ".2.6 .nossl !.nosasl"

- name: solaris-32
  display_name: "Solaris (i386) (GCC 4.9.2)"
  expansions:
    CC: "gcc"
    MARCH: "i386"
  batchtime: 1440 # 1 day
  run_on:
    - solaris
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .nossl .nosasl"
    - ".latest .nossl .nosasl"
      # We don't have i386 builds of OpenSSL or Cyrus SASL installed

- name: darwin
  display_name: "*Darwin, OS X (Apple LLVM)"
  expansions:
    CC: "clang"
  run_on:
    - osx-1010
  tasks:
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .darwinssl"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".debug-compile .clang"
    - ".latest .darwinssl !.nosasl .server"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .darwinssl !.nosasl .server"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".2.6 .nossl !.nosasl" # No MongoDB SSL builds available
    - ".2.4 .nossl !.nosasl"

- name: windows-2015
  display_name: "Windows (VS 2015)"
  expansions:
    CC: "Visual Studio 14 2015 Win64"
  run_on:
    - windows-64-vs2015-compile
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .winssl"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .winssl !.nosasl .server"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .winssl !.nosasl .server"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .nossl !.nosasl"
    - ".2.6 .nossl !.nosasl"
      # There is no 2.4 build for Windows

- name: windows-2015-32
  display_name: "Windows (i386) (VS 2015)"
  expansions:
    CC: "Visual Studio 14 2015"
  run_on:
    - windows-64-vs2015-compile
  tasks:
    - "release-compile"
    - "debug-compile"
      # No 32bit OpenSSL builds
    - ".debug-compile .winssl .nosasl"
    - ".debug-compile .nossl .nosasl"
    - ".latest .winssl .nosasl .server"
    - ".latest .nossl .nosasl"
    - ".3.2 .winssl .nosasl .server"
    - ".3.2 .nossl .nosasl"
    - ".3.0 .nossl .nosasl"
    - ".2.6 .nossl .nosasl"
      # There is no 2.4 build for Windows

- name: windows-2013
  display_name: "Windows (VS 2013)"
  expansions:
    CC: "Visual Studio 12 2013 Win64"
  run_on:
    - windows-64-vs2013-compile
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .winssl"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .winssl !.nosasl .server"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .winssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .nossl !.nosasl"
    - ".2.6 .nossl !.nosasl"
      # There is no 2.4 build for Windows

- name: windows-2013-32
  display_name: "Windows (i386) (VS 2013)"
  expansions:
    CC: "Visual Studio 12 2013"
  run_on:
    - windows-64-vs2013-compile
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .winssl .nosasl"
    - ".debug-compile .nossl .nosasl"
    - ".latest .winssl .nosasl .server"
    - ".latest .nossl .nosasl"
    - ".3.2 .winssl .nosasl .server"
    - ".3.2 .nossl .nosasl"
    - ".3.0 .nossl .nosasl"
    - ".2.6 .nossl .nosasl"
      # There is no 2.4 build for Windows

- name: windows-2010
  display_name: "Windows (VS 2010)"
  expansions:
    CC: "Visual Studio 10 2010 Win64"
  run_on:
    - windows-64-vs2010-compile
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .winssl"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .winssl !.nosasl .server"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .winssl !.nosasl .server"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
    - ".3.0 .nossl !.nosasl"
    - ".2.6 .nossl !.nosasl"
      # There is no 2.4 build for Windows

- name: windows-2010-32
  display_name: "Windows (i386) (VS 2010)"
  expansions:
    CC: "Visual Studio 10 2010"
  run_on:
    - windows-64-vs2010-compile
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .winssl .nosasl"
    - ".debug-compile .nossl .nosasl"
    - ".latest .winssl .nosasl .server"
    - ".latest .nossl .nosasl"
    - ".3.2 .winssl .nosasl .server"
    - ".3.2 .nossl .nosasl"
    - ".3.0 .nossl .nosasl"
    - ".2.6 .nossl .nosasl"
      # There is no 2.4 build for Windows

- name: power8-rhel71
  display_name: "*Power8 (ppc64le) (RHEL 7.1)"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - rhel71-power8-build
  - rhel71-power8-test
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
    - ".3.2 .openssl !.nosasl .server"
    - ".3.2 .nossl !.nosasl"
      # RHEL 7.1 ppc64le is only supported by MongoDB 3.2+

- name: power8-ubuntu1604
  display_name: "Power8 (ppc64le) (Ubuntu 16.04)"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - ubuntu1604-power8-build
  - ubuntu1604-power8-test
  tasks:
    - "debug-compile-scan-build"
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Ubuntu16.04 ppc64le is only supported by MongoDB 3.4+

- name: arm-ubuntu1604
  display_name: "*ARM (aarch64) (Ubuntu 16.04)"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - ubuntu1604-arm64-large
  - ubuntu1604-arm64-small
  tasks:
    - "debug-compile-scan-build"
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Ubuntu16.04 aarch64 is only supported by MongoDB 3.4+

- name: zseries-rhel72
  display_name: "*zSeries (s390x) (RHEL 7.2)"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - rhel72-zseries-test
  - rhel72-zseries-build
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
#      # RHEL7.2  s390x is only supported by MongoDB 3.4+

- name: zseries-ubuntu1604
  display_name: "zSeries (s390x) (Ubuntu 16.04)"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - ubuntu1604-zseries-large
  - ubuntu1604-zseries-small
  tasks:
    - "debug-compile-coverage"
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # Ubuntu16.04 s390x is only supported by MongoDB 3.4+

- name: zseries-suse12
  display_name: "zSeries (s390x) SUSE12"
  expansions:
    CC: "gcc"
  batchtime: 1440 # 1 day
  run_on:
  - suse12-zseries-build
  - suse12-zseries-test
  tasks:
    - "release-compile"
    - "debug-compile"
    - ".debug-compile .openssl"
    - ".debug-compile .nossl"
    - ".latest .openssl !.nosasl .server"
    - ".latest .nossl !.nosasl"
      # SUSE12 s390x is only supported by MongoDB 3.4+



